
On Demand Traffic Light Control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b20  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000b20  00000bb4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800062  00800062  00000bb6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000bb6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000be8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  00000c24  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001206  00000000  00000000  00000d34  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000813  00000000  00000000  00001f3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b68  00000000  00000000  0000274d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  000032b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000557  00000000  00000000  00003478  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000667  00000000  00000000  000039cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00004036  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 ce 01 	jmp	0x39c	; 0x39c <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e2       	ldi	r30, 0x20	; 32
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a3 36       	cpi	r26, 0x63	; 99
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <main>
  8a:	0c 94 8e 05 	jmp	0xb1c	; 0xb1c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <APP_init>:
	/*                    DIO INITIALIZATION                                */
	/************************************************************************/
	
	// Set OUTPUT LEDs Direction For CAR
	// Car LED initialization
	LED_init(LED_CAR_PORT,LED_CAR_G_PIN);
  92:	60 e0       	ldi	r22, 0x00	; 0
  94:	81 e4       	ldi	r24, 0x41	; 65
  96:	0e 94 de 01 	call	0x3bc	; 0x3bc <LED_init>
	LED_init(LED_CAR_PORT,LED_CAR_Y_PIN);
  9a:	61 e0       	ldi	r22, 0x01	; 1
  9c:	81 e4       	ldi	r24, 0x41	; 65
  9e:	0e 94 de 01 	call	0x3bc	; 0x3bc <LED_init>
	LED_init(LED_CAR_PORT,LED_CAR_R_PIN);
  a2:	62 e0       	ldi	r22, 0x02	; 2
  a4:	81 e4       	ldi	r24, 0x41	; 65
  a6:	0e 94 de 01 	call	0x3bc	; 0x3bc <LED_init>
	
	// Set OUTPUT LEDs Direction For PEDESTRIAN
	// Pedestrian LED initialization
	LED_init(LED_PED_PORT,LED_PED_G_PIN);
  aa:	60 e0       	ldi	r22, 0x00	; 0
  ac:	82 e4       	ldi	r24, 0x42	; 66
  ae:	0e 94 de 01 	call	0x3bc	; 0x3bc <LED_init>
	LED_init(LED_PED_PORT,LED_PED_Y_PIN);
  b2:	61 e0       	ldi	r22, 0x01	; 1
  b4:	82 e4       	ldi	r24, 0x42	; 66
  b6:	0e 94 de 01 	call	0x3bc	; 0x3bc <LED_init>
	LED_init(LED_PED_PORT,LED_PED_R_PIN);
  ba:	62 e0       	ldi	r22, 0x02	; 2
  bc:	82 e4       	ldi	r24, 0x42	; 66
  be:	0e 94 de 01 	call	0x3bc	; 0x3bc <LED_init>
	
	// Set INPUT Button Direction
	// Button initialization
	BUTTON_init(BUTTON_1_PORT,BUTTON_1_PIN);
  c2:	62 e0       	ldi	r22, 0x02	; 2
  c4:	84 e4       	ldi	r24, 0x44	; 68
  c6:	0e 94 da 01 	call	0x3b4	; 0x3b4 <BUTTON_init>
	
	// Timer initialization
	TIMER_init();
  ca:	0e 94 ef 02 	call	0x5de	; 0x5de <TIMER_init>
	/************************************************************************/
	/*                   INTERRUPTS INITIALIZATION                          */
	/************************************************************************/
	
	// Enable Global interrupts & setup rising edge detection for button
	sei();
  ce:	78 94       	sei
	RISING_EDGE_SETUP();
  d0:	85 b7       	in	r24, 0x35	; 53
  d2:	83 60       	ori	r24, 0x03	; 3
  d4:	85 bf       	out	0x35, r24	; 53
	SETUP_INT0();
  d6:	8b b7       	in	r24, 0x3b	; 59
  d8:	80 64       	ori	r24, 0x40	; 64
  da:	8b bf       	out	0x3b, r24	; 59
  dc:	08 95       	ret

000000de <APP_start>:
}

// Start Application
void APP_start(void)
{
  de:	cf 93       	push	r28
	// variable to be used in for loop
	uint8_t i;
	
	// if normal mode or need transition (i.e. car green led or yellow is on)
	if(normalmode || carLED==0 || carLED==1)
  e0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  e4:	81 11       	cpse	r24, r1
  e6:	07 c0       	rjmp	.+14     	; 0xf6 <APP_start+0x18>
  e8:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__data_end>
  ec:	99 23       	and	r25, r25
  ee:	19 f0       	breq	.+6      	; 0xf6 <APP_start+0x18>
  f0:	91 30       	cpi	r25, 0x01	; 1
  f2:	09 f0       	breq	.+2      	; 0xf6 <APP_start+0x18>
  f4:	f1 c0       	rjmp	.+482    	; 0x2d8 <APP_start+0x1fa>
	{
		if(!normalmode)
  f6:	81 11       	cpse	r24, r1
  f8:	03 c0       	rjmp	.+6      	; 0x100 <APP_start+0x22>
		{
			carLED=1;
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
		}
		// Configuring Pedestrian LEDs
		LED_off(LED_PED_PORT,LED_PED_G_PIN);
 100:	60 e0       	ldi	r22, 0x00	; 0
 102:	82 e4       	ldi	r24, 0x42	; 66
 104:	0e 94 e6 01 	call	0x3cc	; 0x3cc <LED_off>
		LED_off(LED_PED_PORT,LED_PED_Y_PIN);
 108:	61 e0       	ldi	r22, 0x01	; 1
 10a:	82 e4       	ldi	r24, 0x42	; 66
 10c:	0e 94 e6 01 	call	0x3cc	; 0x3cc <LED_off>
		LED_on(LED_PED_PORT,LED_PED_R_PIN);
 110:	62 e0       	ldi	r22, 0x02	; 2
 112:	82 e4       	ldi	r24, 0x42	; 66
 114:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <LED_on>
		
		switch(carLED)
 118:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 11c:	81 30       	cpi	r24, 0x01	; 1
 11e:	41 f1       	breq	.+80     	; 0x170 <APP_start+0x92>
 120:	20 f0       	brcs	.+8      	; 0x12a <APP_start+0x4c>
 122:	82 30       	cpi	r24, 0x02	; 2
 124:	09 f4       	brne	.+2      	; 0x128 <APP_start+0x4a>
 126:	b1 c0       	rjmp	.+354    	; 0x28a <APP_start+0x1ac>
 128:	d0 c0       	rjmp	.+416    	; 0x2ca <APP_start+0x1ec>
		{
			// Case GREEN LED
			case 0:
			// Turn ON CAR GREEN LED 
			LED_on(LED_CAR_PORT,LED_CAR_G_PIN);
 12a:	60 e0       	ldi	r22, 0x00	; 0
 12c:	81 e4       	ldi	r24, 0x41	; 65
 12e:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <LED_on>
			LED_off(LED_CAR_PORT,LED_CAR_Y_PIN);
 132:	61 e0       	ldi	r22, 0x01	; 1
 134:	81 e4       	ldi	r24, 0x41	; 65
 136:	0e 94 e6 01 	call	0x3cc	; 0x3cc <LED_off>
			LED_off(LED_CAR_PORT,LED_CAR_R_PIN);
 13a:	62 e0       	ldi	r22, 0x02	; 2
 13c:	81 e4       	ldi	r24, 0x41	; 65
 13e:	0e 94 e6 01 	call	0x3cc	; 0x3cc <LED_off>
			
			for(i=0;i<50;i++)
 142:	c0 e0       	ldi	r28, 0x00	; 0
 144:	09 c0       	rjmp	.+18     	; 0x158 <APP_start+0x7a>
			{
				TIMER_delay(68);
 146:	84 e4       	ldi	r24, 0x44	; 68
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <TIMER_delay>
				if(!normalmode)break; 
 14e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 152:	88 23       	and	r24, r24
 154:	19 f0       	breq	.+6      	; 0x15c <APP_start+0x7e>
			// Turn ON CAR GREEN LED 
			LED_on(LED_CAR_PORT,LED_CAR_G_PIN);
			LED_off(LED_CAR_PORT,LED_CAR_Y_PIN);
			LED_off(LED_CAR_PORT,LED_CAR_R_PIN);
			
			for(i=0;i<50;i++)
 156:	cf 5f       	subi	r28, 0xFF	; 255
 158:	c2 33       	cpi	r28, 0x32	; 50
 15a:	a8 f3       	brcs	.-22     	; 0x146 <APP_start+0x68>
				TIMER_delay(68);
				if(!normalmode)break; 
				// check if ISR was called
			}
			// When Button is Pressed turn off Car Green LED Immediately 
			LED_off(LED_CAR_PORT,LED_CAR_G_PIN);
 15c:	60 e0       	ldi	r22, 0x00	; 0
 15e:	81 e4       	ldi	r24, 0x41	; 65
 160:	0e 94 e6 01 	call	0x3cc	; 0x3cc <LED_off>
			carLED=1;
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
			prevcarLED=0;
 16a:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <prevcarLED>
			break;
 16e:	14 c1       	rjmp	.+552    	; 0x398 <APP_start+0x2ba>
			
			// Case YELLOW LED
			case 1:
			// if not normalmode then we need to blink both
			
			if(!normalmode)
 170:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 174:	81 11       	cpse	r24, r1
 176:	44 c0       	rjmp	.+136    	; 0x200 <APP_start+0x122>
			{
				if(prevcarLED!=2)
 178:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <prevcarLED>
 17c:	82 30       	cpi	r24, 0x02	; 2
 17e:	a9 f1       	breq	.+106    	; 0x1ea <APP_start+0x10c>
				{
					LED_on(LED_PED_PORT,LED_PED_R_PIN);
 180:	62 e0       	ldi	r22, 0x02	; 2
 182:	82 e4       	ldi	r24, 0x42	; 66
 184:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <LED_on>
					LED_off(LED_PED_PORT,LED_PED_R_PIN);
 188:	62 e0       	ldi	r22, 0x02	; 2
 18a:	82 e4       	ldi	r24, 0x42	; 66
 18c:	0e 94 e6 01 	call	0x3cc	; 0x3cc <LED_off>
					LED_off(LED_CAR_PORT,LED_CAR_G_PIN);
 190:	60 e0       	ldi	r22, 0x00	; 0
 192:	81 e4       	ldi	r24, 0x41	; 65
 194:	0e 94 e6 01 	call	0x3cc	; 0x3cc <LED_off>
					// Blink both yellow LEDs for 5 Seconds
					for(i=0;i<5;i++)
 198:	c0 e0       	ldi	r28, 0x00	; 0
 19a:	25 c0       	rjmp	.+74     	; 0x1e6 <APP_start+0x108>
					{
						LED_on(LED_CAR_PORT,LED_CAR_Y_PIN);
 19c:	61 e0       	ldi	r22, 0x01	; 1
 19e:	81 e4       	ldi	r24, 0x41	; 65
 1a0:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <LED_on>
						LED_on(LED_PED_PORT,LED_PED_Y_PIN);
 1a4:	61 e0       	ldi	r22, 0x01	; 1
 1a6:	82 e4       	ldi	r24, 0x42	; 66
 1a8:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <LED_on>
						TIMER_delay(390);
 1ac:	86 e8       	ldi	r24, 0x86	; 134
 1ae:	91 e0       	ldi	r25, 0x01	; 1
 1b0:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <TIMER_delay>
						LED_off(LED_CAR_PORT,LED_CAR_Y_PIN);
 1b4:	61 e0       	ldi	r22, 0x01	; 1
 1b6:	81 e4       	ldi	r24, 0x41	; 65
 1b8:	0e 94 e6 01 	call	0x3cc	; 0x3cc <LED_off>
						LED_off(LED_PED_PORT,LED_PED_Y_PIN);
 1bc:	61 e0       	ldi	r22, 0x01	; 1
 1be:	82 e4       	ldi	r24, 0x42	; 66
 1c0:	0e 94 e6 01 	call	0x3cc	; 0x3cc <LED_off>
						TIMER_delay(190);
 1c4:	8e eb       	ldi	r24, 0xBE	; 190
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <TIMER_delay>
						LED_on(LED_CAR_PORT,LED_CAR_Y_PIN);
 1cc:	61 e0       	ldi	r22, 0x01	; 1
 1ce:	81 e4       	ldi	r24, 0x41	; 65
 1d0:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <LED_on>
						LED_on(LED_PED_PORT,LED_PED_Y_PIN);
 1d4:	61 e0       	ldi	r22, 0x01	; 1
 1d6:	82 e4       	ldi	r24, 0x42	; 66
 1d8:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <LED_on>
						TIMER_delay(390);
 1dc:	86 e8       	ldi	r24, 0x86	; 134
 1de:	91 e0       	ldi	r25, 0x01	; 1
 1e0:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <TIMER_delay>
				{
					LED_on(LED_PED_PORT,LED_PED_R_PIN);
					LED_off(LED_PED_PORT,LED_PED_R_PIN);
					LED_off(LED_CAR_PORT,LED_CAR_G_PIN);
					// Blink both yellow LEDs for 5 Seconds
					for(i=0;i<5;i++)
 1e4:	cf 5f       	subi	r28, 0xFF	; 255
 1e6:	c5 30       	cpi	r28, 0x05	; 5
 1e8:	c8 f2       	brcs	.-78     	; 0x19c <APP_start+0xbe>
						LED_on(LED_CAR_PORT,LED_CAR_Y_PIN);
						LED_on(LED_PED_PORT,LED_PED_Y_PIN);
						TIMER_delay(390);
					}
				}
				prevcarLED=1;
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <prevcarLED>
				// to go to PED lights logic
				// Turn on CarLED Red
				carLED=2;
 1f0:	82 e0       	ldi	r24, 0x02	; 2
 1f2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
				LED_on(LED_CAR_PORT,LED_CAR_R_PIN);
 1f6:	62 e0       	ldi	r22, 0x02	; 2
 1f8:	81 e4       	ldi	r24, 0x41	; 65
 1fa:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <LED_on>
 1fe:	29 c0       	rjmp	.+82     	; 0x252 <APP_start+0x174>
			}
			else
			{
				LED_off(LED_CAR_PORT,LED_CAR_R_PIN);
 200:	62 e0       	ldi	r22, 0x02	; 2
 202:	81 e4       	ldi	r24, 0x41	; 65
 204:	0e 94 e6 01 	call	0x3cc	; 0x3cc <LED_off>
				// Blink car yellow led
				for(i=0;i<5;i++)
 208:	c0 e0       	ldi	r28, 0x00	; 0
 20a:	21 c0       	rjmp	.+66     	; 0x24e <APP_start+0x170>
				{
					LED_on(LED_CAR_PORT,LED_CAR_Y_PIN);
 20c:	61 e0       	ldi	r22, 0x01	; 1
 20e:	81 e4       	ldi	r24, 0x41	; 65
 210:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <LED_on>
					TIMER_delay(380);
 214:	8c e7       	ldi	r24, 0x7C	; 124
 216:	91 e0       	ldi	r25, 0x01	; 1
 218:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <TIMER_delay>
					LED_off(LED_CAR_PORT,LED_CAR_Y_PIN);
 21c:	61 e0       	ldi	r22, 0x01	; 1
 21e:	81 e4       	ldi	r24, 0x41	; 65
 220:	0e 94 e6 01 	call	0x3cc	; 0x3cc <LED_off>
					TIMER_delay(180);
 224:	84 eb       	ldi	r24, 0xB4	; 180
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <TIMER_delay>
					LED_on(LED_CAR_PORT,LED_CAR_Y_PIN);
 22c:	61 e0       	ldi	r22, 0x01	; 1
 22e:	81 e4       	ldi	r24, 0x41	; 65
 230:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <LED_on>
					TIMER_delay(380);
 234:	8c e7       	ldi	r24, 0x7C	; 124
 236:	91 e0       	ldi	r25, 0x01	; 1
 238:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <TIMER_delay>
					if(!normalmode)
 23c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 240:	81 11       	cpse	r24, r1
 242:	04 c0       	rjmp	.+8      	; 0x24c <APP_start+0x16e>
					{
						// check if ISR was called
						prevcarLED=1;
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <prevcarLED>
						break;
 24a:	03 c0       	rjmp	.+6      	; 0x252 <APP_start+0x174>
			}
			else
			{
				LED_off(LED_CAR_PORT,LED_CAR_R_PIN);
				// Blink car yellow led
				for(i=0;i<5;i++)
 24c:	cf 5f       	subi	r28, 0xFF	; 255
 24e:	c5 30       	cpi	r28, 0x05	; 5
 250:	e8 f2       	brcs	.-70     	; 0x20c <APP_start+0x12e>
						prevcarLED=1;
						break;
					}
				}
			}
			LED_off(LED_CAR_PORT,LED_CAR_Y_PIN);
 252:	61 e0       	ldi	r22, 0x01	; 1
 254:	81 e4       	ldi	r24, 0x41	; 65
 256:	0e 94 e6 01 	call	0x3cc	; 0x3cc <LED_off>
			LED_off(LED_PED_PORT,LED_PED_Y_PIN);
 25a:	61 e0       	ldi	r22, 0x01	; 1
 25c:	82 e4       	ldi	r24, 0x42	; 66
 25e:	0e 94 e6 01 	call	0x3cc	; 0x3cc <LED_off>
			// Configure variables for correct switching
			if(prevcarLED==0)
 262:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <prevcarLED>
 266:	81 11       	cpse	r24, r1
 268:	07 c0       	rjmp	.+14     	; 0x278 <APP_start+0x19a>
			{
				carLED=2;
 26a:	82 e0       	ldi	r24, 0x02	; 2
 26c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
				prevcarLED=1;
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <prevcarLED>
 276:	90 c0       	rjmp	.+288    	; 0x398 <APP_start+0x2ba>
			}
			else if(prevcarLED==2)
 278:	82 30       	cpi	r24, 0x02	; 2
 27a:	09 f0       	breq	.+2      	; 0x27e <APP_start+0x1a0>
 27c:	8d c0       	rjmp	.+282    	; 0x398 <APP_start+0x2ba>
			{
				carLED=0;
 27e:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
				prevcarLED=1;
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <prevcarLED>
 288:	87 c0       	rjmp	.+270    	; 0x398 <APP_start+0x2ba>
			}
			break;
			
			// Case RED LED
			case 2:
			LED_off(LED_CAR_PORT,LED_CAR_G_PIN);
 28a:	60 e0       	ldi	r22, 0x00	; 0
 28c:	81 e4       	ldi	r24, 0x41	; 65
 28e:	0e 94 e6 01 	call	0x3cc	; 0x3cc <LED_off>
			LED_off(LED_CAR_PORT,LED_CAR_Y_PIN);
 292:	61 e0       	ldi	r22, 0x01	; 1
 294:	81 e4       	ldi	r24, 0x41	; 65
 296:	0e 94 e6 01 	call	0x3cc	; 0x3cc <LED_off>
			LED_on(LED_CAR_PORT,LED_CAR_R_PIN);
 29a:	62 e0       	ldi	r22, 0x02	; 2
 29c:	81 e4       	ldi	r24, 0x41	; 65
 29e:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <LED_on>
			for(i=0;i<50;i++)
 2a2:	c0 e0       	ldi	r28, 0x00	; 0
 2a4:	09 c0       	rjmp	.+18     	; 0x2b8 <APP_start+0x1da>
			{
				TIMER_delay(68);
 2a6:	84 e4       	ldi	r24, 0x44	; 68
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <TIMER_delay>
				if(!normalmode)break;
 2ae:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 2b2:	88 23       	and	r24, r24
 2b4:	19 f0       	breq	.+6      	; 0x2bc <APP_start+0x1de>
			// Case RED LED
			case 2:
			LED_off(LED_CAR_PORT,LED_CAR_G_PIN);
			LED_off(LED_CAR_PORT,LED_CAR_Y_PIN);
			LED_on(LED_CAR_PORT,LED_CAR_R_PIN);
			for(i=0;i<50;i++)
 2b6:	cf 5f       	subi	r28, 0xFF	; 255
 2b8:	c2 33       	cpi	r28, 0x32	; 50
 2ba:	a8 f3       	brcs	.-22     	; 0x2a6 <APP_start+0x1c8>
			{
				TIMER_delay(68);
				if(!normalmode)break;
			}
			
			prevcarLED=2;
 2bc:	82 e0       	ldi	r24, 0x02	; 2
 2be:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <prevcarLED>
			carLED=1;
 2c2:	81 e0       	ldi	r24, 0x01	; 1
 2c4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
			break;
 2c8:	67 c0       	rjmp	.+206    	; 0x398 <APP_start+0x2ba>
			default:
			carLED=2;
 2ca:	82 e0       	ldi	r24, 0x02	; 2
 2cc:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
			prevcarLED=1;
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <prevcarLED>
			break;
 2d6:	60 c0       	rjmp	.+192    	; 0x398 <APP_start+0x2ba>
		}
	}
	else
	{
		// Configure PED LEDs
		LED_on(LED_PED_PORT,LED_PED_G_PIN);
 2d8:	60 e0       	ldi	r22, 0x00	; 0
 2da:	82 e4       	ldi	r24, 0x42	; 66
 2dc:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <LED_on>
		LED_off(LED_PED_PORT,LED_PED_Y_PIN);
 2e0:	61 e0       	ldi	r22, 0x01	; 1
 2e2:	82 e4       	ldi	r24, 0x42	; 66
 2e4:	0e 94 e6 01 	call	0x3cc	; 0x3cc <LED_off>
		LED_off(LED_PED_PORT,LED_PED_R_PIN);
 2e8:	62 e0       	ldi	r22, 0x02	; 2
 2ea:	82 e4       	ldi	r24, 0x42	; 66
 2ec:	0e 94 e6 01 	call	0x3cc	; 0x3cc <LED_off>
		
		// Configure CAR LEDs
		LED_off(LED_CAR_PORT,LED_CAR_G_PIN);
 2f0:	60 e0       	ldi	r22, 0x00	; 0
 2f2:	81 e4       	ldi	r24, 0x41	; 65
 2f4:	0e 94 e6 01 	call	0x3cc	; 0x3cc <LED_off>
		LED_off(LED_CAR_PORT,LED_CAR_Y_PIN);
 2f8:	61 e0       	ldi	r22, 0x01	; 1
 2fa:	81 e4       	ldi	r24, 0x41	; 65
 2fc:	0e 94 e6 01 	call	0x3cc	; 0x3cc <LED_off>
		LED_on(LED_CAR_PORT,LED_CAR_R_PIN);
 300:	62 e0       	ldi	r22, 0x02	; 2
 302:	81 e4       	ldi	r24, 0x41	; 65
 304:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <LED_on>
		TIMER_delay(5000); // 5 sec delay = 5000 ms
 308:	88 e8       	ldi	r24, 0x88	; 136
 30a:	93 e1       	ldi	r25, 0x13	; 19
 30c:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <TIMER_delay>
		
		// make sure car red light is off
		LED_off(LED_CAR_PORT,LED_CAR_R_PIN);
 310:	62 e0       	ldi	r22, 0x02	; 2
 312:	81 e4       	ldi	r24, 0x41	; 65
 314:	0e 94 e6 01 	call	0x3cc	; 0x3cc <LED_off>
		LED_off(LED_PED_PORT,LED_PED_G_PIN);
 318:	60 e0       	ldi	r22, 0x00	; 0
 31a:	82 e4       	ldi	r24, 0x42	; 66
 31c:	0e 94 e6 01 	call	0x3cc	; 0x3cc <LED_off>
		// Blink both yellow while PED green is on
		for(i=0;i<5;i++)
 320:	c0 e0       	ldi	r28, 0x00	; 0
 322:	25 c0       	rjmp	.+74     	; 0x36e <APP_start+0x290>
		{
			LED_on(LED_CAR_PORT,LED_CAR_Y_PIN);
 324:	61 e0       	ldi	r22, 0x01	; 1
 326:	81 e4       	ldi	r24, 0x41	; 65
 328:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <LED_on>
			LED_on(LED_PED_PORT,LED_PED_Y_PIN);
 32c:	61 e0       	ldi	r22, 0x01	; 1
 32e:	82 e4       	ldi	r24, 0x42	; 66
 330:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <LED_on>
			TIMER_delay(390);
 334:	86 e8       	ldi	r24, 0x86	; 134
 336:	91 e0       	ldi	r25, 0x01	; 1
 338:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <TIMER_delay>
			LED_off(LED_CAR_PORT,LED_CAR_Y_PIN);
 33c:	61 e0       	ldi	r22, 0x01	; 1
 33e:	81 e4       	ldi	r24, 0x41	; 65
 340:	0e 94 e6 01 	call	0x3cc	; 0x3cc <LED_off>
			LED_off(LED_PED_PORT,LED_PED_Y_PIN);
 344:	61 e0       	ldi	r22, 0x01	; 1
 346:	82 e4       	ldi	r24, 0x42	; 66
 348:	0e 94 e6 01 	call	0x3cc	; 0x3cc <LED_off>
			TIMER_delay(190);
 34c:	8e eb       	ldi	r24, 0xBE	; 190
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <TIMER_delay>
			LED_on(LED_CAR_PORT,LED_CAR_Y_PIN);
 354:	61 e0       	ldi	r22, 0x01	; 1
 356:	81 e4       	ldi	r24, 0x41	; 65
 358:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <LED_on>
			LED_on(LED_PED_PORT,LED_PED_Y_PIN);
 35c:	61 e0       	ldi	r22, 0x01	; 1
 35e:	82 e4       	ldi	r24, 0x42	; 66
 360:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <LED_on>
			TIMER_delay(390);
 364:	86 e8       	ldi	r24, 0x86	; 134
 366:	91 e0       	ldi	r25, 0x01	; 1
 368:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <TIMER_delay>
		
		// make sure car red light is off
		LED_off(LED_CAR_PORT,LED_CAR_R_PIN);
		LED_off(LED_PED_PORT,LED_PED_G_PIN);
		// Blink both yellow while PED green is on
		for(i=0;i<5;i++)
 36c:	cf 5f       	subi	r28, 0xFF	; 255
 36e:	c5 30       	cpi	r28, 0x05	; 5
 370:	c8 f2       	brcs	.-78     	; 0x324 <APP_start+0x246>
			LED_on(LED_PED_PORT,LED_PED_Y_PIN);
			TIMER_delay(390);
		}
		
		// Turn off yellow LEDs
		LED_off(LED_CAR_PORT,LED_CAR_Y_PIN);
 372:	61 e0       	ldi	r22, 0x01	; 1
 374:	81 e4       	ldi	r24, 0x41	; 65
 376:	0e 94 e6 01 	call	0x3cc	; 0x3cc <LED_off>
		LED_off(LED_PED_PORT,LED_PED_Y_PIN);
 37a:	61 e0       	ldi	r22, 0x01	; 1
 37c:	82 e4       	ldi	r24, 0x42	; 66
 37e:	0e 94 e6 01 	call	0x3cc	; 0x3cc <LED_off>
		// turn on PED red LED
		LED_on(LED_PED_PORT,LED_PED_R_PIN);
 382:	62 e0       	ldi	r22, 0x02	; 2
 384:	82 e4       	ldi	r24, 0x42	; 66
 386:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <LED_on>
		// reset normalmode
		normalmode=1;
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		// Configure carLED variables
		carLED=0;
 390:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
		prevcarLED=1;
 394:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <prevcarLED>
	}
}
 398:	cf 91       	pop	r28
 39a:	08 95       	ret

0000039c <__vector_1>:

// Interrupt Surface Routine to Switch Between MODES
ISR(EXT_INT_0)
{
 39c:	1f 92       	push	r1
 39e:	0f 92       	push	r0
 3a0:	0f b6       	in	r0, 0x3f	; 63
 3a2:	0f 92       	push	r0
 3a4:	11 24       	eor	r1, r1
	normalmode=0;
 3a6:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 3aa:	0f 90       	pop	r0
 3ac:	0f be       	out	0x3f, r0	; 63
 3ae:	0f 90       	pop	r0
 3b0:	1f 90       	pop	r1
 3b2:	18 95       	reti

000003b4 <BUTTON_init>:
 3b4:	40 e0       	ldi	r20, 0x00	; 0
 3b6:	0e 94 ef 01 	call	0x3de	; 0x3de <DIO_init>
 3ba:	08 95       	ret

000003bc <LED_init>:
 3bc:	41 e0       	ldi	r20, 0x01	; 1
 3be:	0e 94 ef 01 	call	0x3de	; 0x3de <DIO_init>
 3c2:	08 95       	ret

000003c4 <LED_on>:
 3c4:	41 e0       	ldi	r20, 0x01	; 1
 3c6:	0e 94 6f 02 	call	0x4de	; 0x4de <DIO_write>
 3ca:	08 95       	ret

000003cc <LED_off>:
 3cc:	40 e0       	ldi	r20, 0x00	; 0
 3ce:	0e 94 6f 02 	call	0x4de	; 0x4de <DIO_write>
 3d2:	08 95       	ret

000003d4 <main>:
#include "Application/app.h"

int main(void)
{
	// Initialize Application
	APP_init();
 3d4:	0e 94 49 00 	call	0x92	; 0x92 <APP_init>
	
	// infinite loop
	while (1)
	{
		// Start The Application 
		APP_start();
 3d8:	0e 94 6f 00 	call	0xde	; 0xde <APP_start>
 3dc:	fd cf       	rjmp	.-6      	; 0x3d8 <main+0x4>

000003de <DIO_init>:
 3de:	85 34       	cpi	r24, 0x45	; 69
 3e0:	08 f0       	brcs	.+2      	; 0x3e4 <DIO_init+0x6>
 3e2:	7c c0       	rjmp	.+248    	; 0x4dc <__EEPROM_REGION_LENGTH__+0xdc>
 3e4:	68 30       	cpi	r22, 0x08	; 8
 3e6:	08 f0       	brcs	.+2      	; 0x3ea <DIO_init+0xc>
 3e8:	79 c0       	rjmp	.+242    	; 0x4dc <__EEPROM_REGION_LENGTH__+0xdc>
 3ea:	82 34       	cpi	r24, 0x42	; 66
 3ec:	31 f1       	breq	.+76     	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 3ee:	18 f4       	brcc	.+6      	; 0x3f6 <DIO_init+0x18>
 3f0:	81 34       	cpi	r24, 0x41	; 65
 3f2:	39 f0       	breq	.+14     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 3f4:	08 95       	ret
 3f6:	83 34       	cpi	r24, 0x43	; 67
 3f8:	e1 f1       	breq	.+120    	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
 3fa:	84 34       	cpi	r24, 0x44	; 68
 3fc:	09 f4       	brne	.+2      	; 0x400 <__EEPROM_REGION_LENGTH__>
 3fe:	54 c0       	rjmp	.+168    	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
 400:	08 95       	ret
 402:	41 11       	cpse	r20, r1
 404:	0c c0       	rjmp	.+24     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 406:	2a b3       	in	r18, 0x1a	; 26
 408:	81 e0       	ldi	r24, 0x01	; 1
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	02 c0       	rjmp	.+4      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 40e:	88 0f       	add	r24, r24
 410:	99 1f       	adc	r25, r25
 412:	6a 95       	dec	r22
 414:	e2 f7       	brpl	.-8      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 416:	80 95       	com	r24
 418:	82 23       	and	r24, r18
 41a:	8a bb       	out	0x1a, r24	; 26
 41c:	08 95       	ret
 41e:	41 30       	cpi	r20, 0x01	; 1
 420:	09 f0       	breq	.+2      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 422:	5c c0       	rjmp	.+184    	; 0x4dc <__EEPROM_REGION_LENGTH__+0xdc>
 424:	2a b3       	in	r18, 0x1a	; 26
 426:	81 e0       	ldi	r24, 0x01	; 1
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	02 c0       	rjmp	.+4      	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
 42c:	88 0f       	add	r24, r24
 42e:	99 1f       	adc	r25, r25
 430:	6a 95       	dec	r22
 432:	e2 f7       	brpl	.-8      	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
 434:	82 2b       	or	r24, r18
 436:	8a bb       	out	0x1a, r24	; 26
 438:	08 95       	ret
 43a:	41 11       	cpse	r20, r1
 43c:	0c c0       	rjmp	.+24     	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
 43e:	27 b3       	in	r18, 0x17	; 23
 440:	81 e0       	ldi	r24, 0x01	; 1
 442:	90 e0       	ldi	r25, 0x00	; 0
 444:	02 c0       	rjmp	.+4      	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
 446:	88 0f       	add	r24, r24
 448:	99 1f       	adc	r25, r25
 44a:	6a 95       	dec	r22
 44c:	e2 f7       	brpl	.-8      	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
 44e:	80 95       	com	r24
 450:	82 23       	and	r24, r18
 452:	87 bb       	out	0x17, r24	; 23
 454:	08 95       	ret
 456:	41 30       	cpi	r20, 0x01	; 1
 458:	09 f0       	breq	.+2      	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
 45a:	40 c0       	rjmp	.+128    	; 0x4dc <__EEPROM_REGION_LENGTH__+0xdc>
 45c:	27 b3       	in	r18, 0x17	; 23
 45e:	81 e0       	ldi	r24, 0x01	; 1
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	02 c0       	rjmp	.+4      	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
 464:	88 0f       	add	r24, r24
 466:	99 1f       	adc	r25, r25
 468:	6a 95       	dec	r22
 46a:	e2 f7       	brpl	.-8      	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
 46c:	82 2b       	or	r24, r18
 46e:	87 bb       	out	0x17, r24	; 23
 470:	08 95       	ret
 472:	41 11       	cpse	r20, r1
 474:	0c c0       	rjmp	.+24     	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
 476:	24 b3       	in	r18, 0x14	; 20
 478:	81 e0       	ldi	r24, 0x01	; 1
 47a:	90 e0       	ldi	r25, 0x00	; 0
 47c:	02 c0       	rjmp	.+4      	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
 47e:	88 0f       	add	r24, r24
 480:	99 1f       	adc	r25, r25
 482:	6a 95       	dec	r22
 484:	e2 f7       	brpl	.-8      	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
 486:	80 95       	com	r24
 488:	82 23       	and	r24, r18
 48a:	84 bb       	out	0x14, r24	; 20
 48c:	08 95       	ret
 48e:	41 30       	cpi	r20, 0x01	; 1
 490:	29 f5       	brne	.+74     	; 0x4dc <__EEPROM_REGION_LENGTH__+0xdc>
 492:	24 b3       	in	r18, 0x14	; 20
 494:	81 e0       	ldi	r24, 0x01	; 1
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	02 c0       	rjmp	.+4      	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
 49a:	88 0f       	add	r24, r24
 49c:	99 1f       	adc	r25, r25
 49e:	6a 95       	dec	r22
 4a0:	e2 f7       	brpl	.-8      	; 0x49a <__EEPROM_REGION_LENGTH__+0x9a>
 4a2:	82 2b       	or	r24, r18
 4a4:	84 bb       	out	0x14, r24	; 20
 4a6:	08 95       	ret
 4a8:	41 11       	cpse	r20, r1
 4aa:	0c c0       	rjmp	.+24     	; 0x4c4 <__EEPROM_REGION_LENGTH__+0xc4>
 4ac:	21 b3       	in	r18, 0x11	; 17
 4ae:	81 e0       	ldi	r24, 0x01	; 1
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	02 c0       	rjmp	.+4      	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
 4b4:	88 0f       	add	r24, r24
 4b6:	99 1f       	adc	r25, r25
 4b8:	6a 95       	dec	r22
 4ba:	e2 f7       	brpl	.-8      	; 0x4b4 <__EEPROM_REGION_LENGTH__+0xb4>
 4bc:	80 95       	com	r24
 4be:	82 23       	and	r24, r18
 4c0:	81 bb       	out	0x11, r24	; 17
 4c2:	08 95       	ret
 4c4:	41 30       	cpi	r20, 0x01	; 1
 4c6:	51 f4       	brne	.+20     	; 0x4dc <__EEPROM_REGION_LENGTH__+0xdc>
 4c8:	21 b3       	in	r18, 0x11	; 17
 4ca:	81 e0       	ldi	r24, 0x01	; 1
 4cc:	90 e0       	ldi	r25, 0x00	; 0
 4ce:	02 c0       	rjmp	.+4      	; 0x4d4 <__EEPROM_REGION_LENGTH__+0xd4>
 4d0:	88 0f       	add	r24, r24
 4d2:	99 1f       	adc	r25, r25
 4d4:	6a 95       	dec	r22
 4d6:	e2 f7       	brpl	.-8      	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
 4d8:	82 2b       	or	r24, r18
 4da:	81 bb       	out	0x11, r24	; 17
 4dc:	08 95       	ret

000004de <DIO_write>:
 4de:	85 34       	cpi	r24, 0x45	; 69
 4e0:	08 f0       	brcs	.+2      	; 0x4e4 <DIO_write+0x6>
 4e2:	7c c0       	rjmp	.+248    	; 0x5dc <DIO_write+0xfe>
 4e4:	68 30       	cpi	r22, 0x08	; 8
 4e6:	08 f0       	brcs	.+2      	; 0x4ea <DIO_write+0xc>
 4e8:	79 c0       	rjmp	.+242    	; 0x5dc <DIO_write+0xfe>
 4ea:	82 34       	cpi	r24, 0x42	; 66
 4ec:	31 f1       	breq	.+76     	; 0x53a <DIO_write+0x5c>
 4ee:	18 f4       	brcc	.+6      	; 0x4f6 <DIO_write+0x18>
 4f0:	81 34       	cpi	r24, 0x41	; 65
 4f2:	39 f0       	breq	.+14     	; 0x502 <DIO_write+0x24>
 4f4:	08 95       	ret
 4f6:	83 34       	cpi	r24, 0x43	; 67
 4f8:	e1 f1       	breq	.+120    	; 0x572 <DIO_write+0x94>
 4fa:	84 34       	cpi	r24, 0x44	; 68
 4fc:	09 f4       	brne	.+2      	; 0x500 <DIO_write+0x22>
 4fe:	54 c0       	rjmp	.+168    	; 0x5a8 <DIO_write+0xca>
 500:	08 95       	ret
 502:	41 11       	cpse	r20, r1
 504:	0c c0       	rjmp	.+24     	; 0x51e <DIO_write+0x40>
 506:	2b b3       	in	r18, 0x1b	; 27
 508:	81 e0       	ldi	r24, 0x01	; 1
 50a:	90 e0       	ldi	r25, 0x00	; 0
 50c:	02 c0       	rjmp	.+4      	; 0x512 <DIO_write+0x34>
 50e:	88 0f       	add	r24, r24
 510:	99 1f       	adc	r25, r25
 512:	6a 95       	dec	r22
 514:	e2 f7       	brpl	.-8      	; 0x50e <DIO_write+0x30>
 516:	80 95       	com	r24
 518:	82 23       	and	r24, r18
 51a:	8b bb       	out	0x1b, r24	; 27
 51c:	08 95       	ret
 51e:	41 30       	cpi	r20, 0x01	; 1
 520:	09 f0       	breq	.+2      	; 0x524 <DIO_write+0x46>
 522:	5c c0       	rjmp	.+184    	; 0x5dc <DIO_write+0xfe>
 524:	2b b3       	in	r18, 0x1b	; 27
 526:	81 e0       	ldi	r24, 0x01	; 1
 528:	90 e0       	ldi	r25, 0x00	; 0
 52a:	02 c0       	rjmp	.+4      	; 0x530 <DIO_write+0x52>
 52c:	88 0f       	add	r24, r24
 52e:	99 1f       	adc	r25, r25
 530:	6a 95       	dec	r22
 532:	e2 f7       	brpl	.-8      	; 0x52c <DIO_write+0x4e>
 534:	82 2b       	or	r24, r18
 536:	8b bb       	out	0x1b, r24	; 27
 538:	08 95       	ret
 53a:	41 11       	cpse	r20, r1
 53c:	0c c0       	rjmp	.+24     	; 0x556 <DIO_write+0x78>
 53e:	28 b3       	in	r18, 0x18	; 24
 540:	81 e0       	ldi	r24, 0x01	; 1
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	02 c0       	rjmp	.+4      	; 0x54a <DIO_write+0x6c>
 546:	88 0f       	add	r24, r24
 548:	99 1f       	adc	r25, r25
 54a:	6a 95       	dec	r22
 54c:	e2 f7       	brpl	.-8      	; 0x546 <DIO_write+0x68>
 54e:	80 95       	com	r24
 550:	82 23       	and	r24, r18
 552:	88 bb       	out	0x18, r24	; 24
 554:	08 95       	ret
 556:	41 30       	cpi	r20, 0x01	; 1
 558:	09 f0       	breq	.+2      	; 0x55c <DIO_write+0x7e>
 55a:	40 c0       	rjmp	.+128    	; 0x5dc <DIO_write+0xfe>
 55c:	28 b3       	in	r18, 0x18	; 24
 55e:	81 e0       	ldi	r24, 0x01	; 1
 560:	90 e0       	ldi	r25, 0x00	; 0
 562:	02 c0       	rjmp	.+4      	; 0x568 <DIO_write+0x8a>
 564:	88 0f       	add	r24, r24
 566:	99 1f       	adc	r25, r25
 568:	6a 95       	dec	r22
 56a:	e2 f7       	brpl	.-8      	; 0x564 <DIO_write+0x86>
 56c:	82 2b       	or	r24, r18
 56e:	88 bb       	out	0x18, r24	; 24
 570:	08 95       	ret
 572:	41 11       	cpse	r20, r1
 574:	0c c0       	rjmp	.+24     	; 0x58e <DIO_write+0xb0>
 576:	25 b3       	in	r18, 0x15	; 21
 578:	81 e0       	ldi	r24, 0x01	; 1
 57a:	90 e0       	ldi	r25, 0x00	; 0
 57c:	02 c0       	rjmp	.+4      	; 0x582 <DIO_write+0xa4>
 57e:	88 0f       	add	r24, r24
 580:	99 1f       	adc	r25, r25
 582:	6a 95       	dec	r22
 584:	e2 f7       	brpl	.-8      	; 0x57e <DIO_write+0xa0>
 586:	80 95       	com	r24
 588:	82 23       	and	r24, r18
 58a:	85 bb       	out	0x15, r24	; 21
 58c:	08 95       	ret
 58e:	41 30       	cpi	r20, 0x01	; 1
 590:	29 f5       	brne	.+74     	; 0x5dc <DIO_write+0xfe>
 592:	25 b3       	in	r18, 0x15	; 21
 594:	81 e0       	ldi	r24, 0x01	; 1
 596:	90 e0       	ldi	r25, 0x00	; 0
 598:	02 c0       	rjmp	.+4      	; 0x59e <DIO_write+0xc0>
 59a:	88 0f       	add	r24, r24
 59c:	99 1f       	adc	r25, r25
 59e:	6a 95       	dec	r22
 5a0:	e2 f7       	brpl	.-8      	; 0x59a <DIO_write+0xbc>
 5a2:	82 2b       	or	r24, r18
 5a4:	85 bb       	out	0x15, r24	; 21
 5a6:	08 95       	ret
 5a8:	41 11       	cpse	r20, r1
 5aa:	0c c0       	rjmp	.+24     	; 0x5c4 <DIO_write+0xe6>
 5ac:	22 b3       	in	r18, 0x12	; 18
 5ae:	81 e0       	ldi	r24, 0x01	; 1
 5b0:	90 e0       	ldi	r25, 0x00	; 0
 5b2:	02 c0       	rjmp	.+4      	; 0x5b8 <DIO_write+0xda>
 5b4:	88 0f       	add	r24, r24
 5b6:	99 1f       	adc	r25, r25
 5b8:	6a 95       	dec	r22
 5ba:	e2 f7       	brpl	.-8      	; 0x5b4 <DIO_write+0xd6>
 5bc:	80 95       	com	r24
 5be:	82 23       	and	r24, r18
 5c0:	82 bb       	out	0x12, r24	; 18
 5c2:	08 95       	ret
 5c4:	41 30       	cpi	r20, 0x01	; 1
 5c6:	51 f4       	brne	.+20     	; 0x5dc <DIO_write+0xfe>
 5c8:	22 b3       	in	r18, 0x12	; 18
 5ca:	81 e0       	ldi	r24, 0x01	; 1
 5cc:	90 e0       	ldi	r25, 0x00	; 0
 5ce:	02 c0       	rjmp	.+4      	; 0x5d4 <DIO_write+0xf6>
 5d0:	88 0f       	add	r24, r24
 5d2:	99 1f       	adc	r25, r25
 5d4:	6a 95       	dec	r22
 5d6:	e2 f7       	brpl	.-8      	; 0x5d0 <DIO_write+0xf2>
 5d8:	82 2b       	or	r24, r18
 5da:	82 bb       	out	0x12, r24	; 18
 5dc:	08 95       	ret

000005de <TIMER_init>:
#include "../../Utilities/bit_manipulation.h"

void TIMER_init()
{
	//normal mode Timer Counter Control Register
	TCCR0 = 0x00;
 5de:	13 be       	out	0x33, r1	; 51
 5e0:	08 95       	ret

000005e2 <TIMER_delay>:
}

void TIMER_delay(uint16_t millisec)
{
 5e2:	8f 92       	push	r8
 5e4:	9f 92       	push	r9
 5e6:	af 92       	push	r10
 5e8:	bf 92       	push	r11
 5ea:	cf 92       	push	r12
 5ec:	df 92       	push	r13
 5ee:	ef 92       	push	r14
 5f0:	ff 92       	push	r15
 5f2:	cf 93       	push	r28
 5f4:	df 93       	push	r29
 5f6:	ec 01       	movw	r28, r24
	// ms		Tmaxdelay = Ttick * 2^8 // as Timer0 (8 bits)
	Tmaxdelay = 65.536; 
	// takes the maximum delay time Tmaxdelay and the current value of the timer in milliseconds (millisec) as input, 
	// and calculates the initial timer value (TimerInitial) and the number of timer overflows required (Noverflows) 
	// to generate the desired delay.
	if(millisec<Tmaxdelay)
 5f8:	bc 01       	movw	r22, r24
 5fa:	80 e0       	ldi	r24, 0x00	; 0
 5fc:	90 e0       	ldi	r25, 0x00	; 0
 5fe:	0e 94 9b 04 	call	0x936	; 0x936 <__floatunsisf>
 602:	6b 01       	movw	r12, r22
 604:	7c 01       	movw	r14, r24
 606:	2f e6       	ldi	r18, 0x6F	; 111
 608:	32 e1       	ldi	r19, 0x12	; 18
 60a:	43 e8       	ldi	r20, 0x83	; 131
 60c:	52 e4       	ldi	r21, 0x42	; 66
 60e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__cmpsf2>
 612:	88 23       	and	r24, r24
 614:	9c f4       	brge	.+38     	; 0x63c <TIMER_delay+0x5a>
	{
		// checks if the remaining time to reach Tmaxdelay is less than the current timer interval (Ttick). 
		// If so, it sets the TimerInitial to the number of timer ticks remaining to reach Tmaxdelay, 
		// and sets Noverflows to 1, indicating that only one timer overflow is needed to generate the delay.
		TimerInitial = (Tmaxdelay-millisec)/Ttick;
 616:	a7 01       	movw	r20, r14
 618:	96 01       	movw	r18, r12
 61a:	6f e6       	ldi	r22, 0x6F	; 111
 61c:	72 e1       	ldi	r23, 0x12	; 18
 61e:	83 e8       	ldi	r24, 0x83	; 131
 620:	92 e4       	ldi	r25, 0x42	; 66
 622:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__subsf3>
 626:	2f e6       	ldi	r18, 0x6F	; 111
 628:	32 e1       	ldi	r19, 0x12	; 18
 62a:	43 e8       	ldi	r20, 0x83	; 131
 62c:	5e e3       	ldi	r21, 0x3E	; 62
 62e:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <__divsf3>
 632:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <__fixunssfsi>
		Noverflows = 1;
 636:	c1 e0       	ldi	r28, 0x01	; 1
 638:	d0 e0       	ldi	r29, 0x00	; 0
 63a:	35 c0       	rjmp	.+106    	; 0x6a6 <TIMER_delay+0xc4>
	}
	else if(millisec == (int)Tmaxdelay)
 63c:	c1 34       	cpi	r28, 0x41	; 65
 63e:	d1 05       	cpc	r29, r1
 640:	79 f1       	breq	.+94     	; 0x6a0 <TIMER_delay+0xbe>
		// calculates the number of timer overflows needed to generate the delay by dividing the 
		// total delay time (millisec) by Tmaxdelay and taking the ceiling of the result 
		// (to ensure that enough overflows are generated to reach the desired delay). 
		// The code then calculates the initial timer value by subtracting the current timer value 
		// from (1<<8) (i.e. 256) and dividing by the number of overflows required.
		Noverflows = ceil((double)millisec/Tmaxdelay);
 642:	2f e6       	ldi	r18, 0x6F	; 111
 644:	32 e1       	ldi	r19, 0x12	; 18
 646:	43 e8       	ldi	r20, 0x83	; 131
 648:	52 e4       	ldi	r21, 0x42	; 66
 64a:	c7 01       	movw	r24, r14
 64c:	b6 01       	movw	r22, r12
 64e:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <__divsf3>
 652:	0e 94 de 03 	call	0x7bc	; 0x7bc <ceil>
 656:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <__fixunssfsi>
 65a:	4b 01       	movw	r8, r22
 65c:	5c 01       	movw	r10, r24
 65e:	eb 01       	movw	r28, r22
		TimerInitial = (1<<8) - ((double)millisec/Ttick)/Noverflows;
 660:	2f e6       	ldi	r18, 0x6F	; 111
 662:	32 e1       	ldi	r19, 0x12	; 18
 664:	43 e8       	ldi	r20, 0x83	; 131
 666:	5e e3       	ldi	r21, 0x3E	; 62
 668:	c7 01       	movw	r24, r14
 66a:	b6 01       	movw	r22, r12
 66c:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <__divsf3>
 670:	6b 01       	movw	r12, r22
 672:	7c 01       	movw	r14, r24
 674:	b4 01       	movw	r22, r8
 676:	80 e0       	ldi	r24, 0x00	; 0
 678:	90 e0       	ldi	r25, 0x00	; 0
 67a:	0e 94 9b 04 	call	0x936	; 0x936 <__floatunsisf>
 67e:	9b 01       	movw	r18, r22
 680:	ac 01       	movw	r20, r24
 682:	c7 01       	movw	r24, r14
 684:	b6 01       	movw	r22, r12
 686:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <__divsf3>
 68a:	9b 01       	movw	r18, r22
 68c:	ac 01       	movw	r20, r24
 68e:	60 e0       	ldi	r22, 0x00	; 0
 690:	70 e0       	ldi	r23, 0x00	; 0
 692:	80 e8       	ldi	r24, 0x80	; 128
 694:	93 e4       	ldi	r25, 0x43	; 67
 696:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__subsf3>
 69a:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <__fixunssfsi>
 69e:	03 c0       	rjmp	.+6      	; 0x6a6 <TIMER_delay+0xc4>
		TimerInitial = (Tmaxdelay-millisec)/Ttick;
		Noverflows = 1;
	}
	else if(millisec == (int)Tmaxdelay)
	{
		TimerInitial=0;
 6a0:	60 e0       	ldi	r22, 0x00	; 0
		Noverflows=1;
 6a2:	c1 e0       	ldi	r28, 0x01	; 1
 6a4:	d0 e0       	ldi	r29, 0x00	; 0
		// from (1<<8) (i.e. 256) and dividing by the number of overflows required.
		Noverflows = ceil((double)millisec/Tmaxdelay);
		TimerInitial = (1<<8) - ((double)millisec/Ttick)/Noverflows;
	}
	// Timer0 Counter
	TCNT0 = TimerInitial;
 6a6:	62 bf       	out	0x32, r22	; 50
	//set 256 Prescaler
	TCCR0 |= (1<<2); 
 6a8:	83 b7       	in	r24, 0x33	; 51
 6aa:	84 60       	ori	r24, 0x04	; 4
 6ac:	83 bf       	out	0x33, r24	; 51

void TIMER_delay(uint16_t millisec)
{
	uint16_t Noverflows,TimerInitial;
	double Tmaxdelay,Ttick;
	uint32_t overFlowcnt = 0;
 6ae:	20 e0       	ldi	r18, 0x00	; 0
 6b0:	30 e0       	ldi	r19, 0x00	; 0
	// Timer0 Counter
	TCNT0 = TimerInitial;
	//set 256 Prescaler
	TCCR0 |= (1<<2); 
	
	while(overFlowcnt<Noverflows)
 6b2:	08 c0       	rjmp	.+16     	; 0x6c4 <TIMER_delay+0xe2>
	{
		// TIFR = Timer Interrupt Flag Register
		// busy wait
		while(READ_BIT(TIFR,0)==0);
 6b4:	08 b6       	in	r0, 0x38	; 56
 6b6:	00 fe       	sbrs	r0, 0
 6b8:	fd cf       	rjmp	.-6      	; 0x6b4 <TIMER_delay+0xd2>
		// clear overflow flag
		SET_BIT(TIFR,0);
 6ba:	88 b7       	in	r24, 0x38	; 56
 6bc:	81 60       	ori	r24, 0x01	; 1
 6be:	88 bf       	out	0x38, r24	; 56
		// increment counter
		overFlowcnt++;
 6c0:	2f 5f       	subi	r18, 0xFF	; 255
 6c2:	3f 4f       	sbci	r19, 0xFF	; 255
	// Timer0 Counter
	TCNT0 = TimerInitial;
	//set 256 Prescaler
	TCCR0 |= (1<<2); 
	
	while(overFlowcnt<Noverflows)
 6c4:	2c 17       	cp	r18, r28
 6c6:	3d 07       	cpc	r19, r29
 6c8:	a8 f3       	brcs	.-22     	; 0x6b4 <TIMER_delay+0xd2>
		// increment counter
		overFlowcnt++;
	}
	
	// Timer stop
	TCCR0 = 0x00;
 6ca:	13 be       	out	0x33, r1	; 51
 6cc:	df 91       	pop	r29
 6ce:	cf 91       	pop	r28
 6d0:	ff 90       	pop	r15
 6d2:	ef 90       	pop	r14
 6d4:	df 90       	pop	r13
 6d6:	cf 90       	pop	r12
 6d8:	bf 90       	pop	r11
 6da:	af 90       	pop	r10
 6dc:	9f 90       	pop	r9
 6de:	8f 90       	pop	r8
 6e0:	08 95       	ret

000006e2 <__subsf3>:
 6e2:	50 58       	subi	r21, 0x80	; 128

000006e4 <__addsf3>:
 6e4:	bb 27       	eor	r27, r27
 6e6:	aa 27       	eor	r26, r26
 6e8:	0e 94 89 03 	call	0x712	; 0x712 <__addsf3x>
 6ec:	0c 94 3c 05 	jmp	0xa78	; 0xa78 <__fp_round>
 6f0:	0e 94 2e 05 	call	0xa5c	; 0xa5c <__fp_pscA>
 6f4:	38 f0       	brcs	.+14     	; 0x704 <__addsf3+0x20>
 6f6:	0e 94 35 05 	call	0xa6a	; 0xa6a <__fp_pscB>
 6fa:	20 f0       	brcs	.+8      	; 0x704 <__addsf3+0x20>
 6fc:	39 f4       	brne	.+14     	; 0x70c <__addsf3+0x28>
 6fe:	9f 3f       	cpi	r25, 0xFF	; 255
 700:	19 f4       	brne	.+6      	; 0x708 <__addsf3+0x24>
 702:	26 f4       	brtc	.+8      	; 0x70c <__addsf3+0x28>
 704:	0c 94 2b 05 	jmp	0xa56	; 0xa56 <__fp_nan>
 708:	0e f4       	brtc	.+2      	; 0x70c <__addsf3+0x28>
 70a:	e0 95       	com	r30
 70c:	e7 fb       	bst	r30, 7
 70e:	0c 94 fc 04 	jmp	0x9f8	; 0x9f8 <__fp_inf>

00000712 <__addsf3x>:
 712:	e9 2f       	mov	r30, r25
 714:	0e 94 4d 05 	call	0xa9a	; 0xa9a <__fp_split3>
 718:	58 f3       	brcs	.-42     	; 0x6f0 <__addsf3+0xc>
 71a:	ba 17       	cp	r27, r26
 71c:	62 07       	cpc	r22, r18
 71e:	73 07       	cpc	r23, r19
 720:	84 07       	cpc	r24, r20
 722:	95 07       	cpc	r25, r21
 724:	20 f0       	brcs	.+8      	; 0x72e <__addsf3x+0x1c>
 726:	79 f4       	brne	.+30     	; 0x746 <__addsf3x+0x34>
 728:	a6 f5       	brtc	.+104    	; 0x792 <__addsf3x+0x80>
 72a:	0c 94 87 05 	jmp	0xb0e	; 0xb0e <__fp_zero>
 72e:	0e f4       	brtc	.+2      	; 0x732 <__addsf3x+0x20>
 730:	e0 95       	com	r30
 732:	0b 2e       	mov	r0, r27
 734:	ba 2f       	mov	r27, r26
 736:	a0 2d       	mov	r26, r0
 738:	0b 01       	movw	r0, r22
 73a:	b9 01       	movw	r22, r18
 73c:	90 01       	movw	r18, r0
 73e:	0c 01       	movw	r0, r24
 740:	ca 01       	movw	r24, r20
 742:	a0 01       	movw	r20, r0
 744:	11 24       	eor	r1, r1
 746:	ff 27       	eor	r31, r31
 748:	59 1b       	sub	r21, r25
 74a:	99 f0       	breq	.+38     	; 0x772 <__addsf3x+0x60>
 74c:	59 3f       	cpi	r21, 0xF9	; 249
 74e:	50 f4       	brcc	.+20     	; 0x764 <__addsf3x+0x52>
 750:	50 3e       	cpi	r21, 0xE0	; 224
 752:	68 f1       	brcs	.+90     	; 0x7ae <__addsf3x+0x9c>
 754:	1a 16       	cp	r1, r26
 756:	f0 40       	sbci	r31, 0x00	; 0
 758:	a2 2f       	mov	r26, r18
 75a:	23 2f       	mov	r18, r19
 75c:	34 2f       	mov	r19, r20
 75e:	44 27       	eor	r20, r20
 760:	58 5f       	subi	r21, 0xF8	; 248
 762:	f3 cf       	rjmp	.-26     	; 0x74a <__addsf3x+0x38>
 764:	46 95       	lsr	r20
 766:	37 95       	ror	r19
 768:	27 95       	ror	r18
 76a:	a7 95       	ror	r26
 76c:	f0 40       	sbci	r31, 0x00	; 0
 76e:	53 95       	inc	r21
 770:	c9 f7       	brne	.-14     	; 0x764 <__addsf3x+0x52>
 772:	7e f4       	brtc	.+30     	; 0x792 <__addsf3x+0x80>
 774:	1f 16       	cp	r1, r31
 776:	ba 0b       	sbc	r27, r26
 778:	62 0b       	sbc	r22, r18
 77a:	73 0b       	sbc	r23, r19
 77c:	84 0b       	sbc	r24, r20
 77e:	ba f0       	brmi	.+46     	; 0x7ae <__addsf3x+0x9c>
 780:	91 50       	subi	r25, 0x01	; 1
 782:	a1 f0       	breq	.+40     	; 0x7ac <__addsf3x+0x9a>
 784:	ff 0f       	add	r31, r31
 786:	bb 1f       	adc	r27, r27
 788:	66 1f       	adc	r22, r22
 78a:	77 1f       	adc	r23, r23
 78c:	88 1f       	adc	r24, r24
 78e:	c2 f7       	brpl	.-16     	; 0x780 <__addsf3x+0x6e>
 790:	0e c0       	rjmp	.+28     	; 0x7ae <__addsf3x+0x9c>
 792:	ba 0f       	add	r27, r26
 794:	62 1f       	adc	r22, r18
 796:	73 1f       	adc	r23, r19
 798:	84 1f       	adc	r24, r20
 79a:	48 f4       	brcc	.+18     	; 0x7ae <__addsf3x+0x9c>
 79c:	87 95       	ror	r24
 79e:	77 95       	ror	r23
 7a0:	67 95       	ror	r22
 7a2:	b7 95       	ror	r27
 7a4:	f7 95       	ror	r31
 7a6:	9e 3f       	cpi	r25, 0xFE	; 254
 7a8:	08 f0       	brcs	.+2      	; 0x7ac <__addsf3x+0x9a>
 7aa:	b0 cf       	rjmp	.-160    	; 0x70c <__addsf3+0x28>
 7ac:	93 95       	inc	r25
 7ae:	88 0f       	add	r24, r24
 7b0:	08 f0       	brcs	.+2      	; 0x7b4 <__addsf3x+0xa2>
 7b2:	99 27       	eor	r25, r25
 7b4:	ee 0f       	add	r30, r30
 7b6:	97 95       	ror	r25
 7b8:	87 95       	ror	r24
 7ba:	08 95       	ret

000007bc <ceil>:
 7bc:	0e 94 6f 05 	call	0xade	; 0xade <__fp_trunc>
 7c0:	90 f0       	brcs	.+36     	; 0x7e6 <ceil+0x2a>
 7c2:	9f 37       	cpi	r25, 0x7F	; 127
 7c4:	48 f4       	brcc	.+18     	; 0x7d8 <ceil+0x1c>
 7c6:	91 11       	cpse	r25, r1
 7c8:	16 f4       	brtc	.+4      	; 0x7ce <ceil+0x12>
 7ca:	0c 94 88 05 	jmp	0xb10	; 0xb10 <__fp_szero>
 7ce:	60 e0       	ldi	r22, 0x00	; 0
 7d0:	70 e0       	ldi	r23, 0x00	; 0
 7d2:	80 e8       	ldi	r24, 0x80	; 128
 7d4:	9f e3       	ldi	r25, 0x3F	; 63
 7d6:	08 95       	ret
 7d8:	26 f0       	brts	.+8      	; 0x7e2 <ceil+0x26>
 7da:	1b 16       	cp	r1, r27
 7dc:	61 1d       	adc	r22, r1
 7de:	71 1d       	adc	r23, r1
 7e0:	81 1d       	adc	r24, r1
 7e2:	0c 94 02 05 	jmp	0xa04	; 0xa04 <__fp_mintl>
 7e6:	0c 94 1d 05 	jmp	0xa3a	; 0xa3a <__fp_mpack>

000007ea <__cmpsf2>:
 7ea:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <__fp_cmp>
 7ee:	08 f4       	brcc	.+2      	; 0x7f2 <__cmpsf2+0x8>
 7f0:	81 e0       	ldi	r24, 0x01	; 1
 7f2:	08 95       	ret

000007f4 <__divsf3>:
 7f4:	0e 94 0e 04 	call	0x81c	; 0x81c <__divsf3x>
 7f8:	0c 94 3c 05 	jmp	0xa78	; 0xa78 <__fp_round>
 7fc:	0e 94 35 05 	call	0xa6a	; 0xa6a <__fp_pscB>
 800:	58 f0       	brcs	.+22     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
 802:	0e 94 2e 05 	call	0xa5c	; 0xa5c <__fp_pscA>
 806:	40 f0       	brcs	.+16     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
 808:	29 f4       	brne	.+10     	; 0x814 <__DATA_REGION_LENGTH__+0x14>
 80a:	5f 3f       	cpi	r21, 0xFF	; 255
 80c:	29 f0       	breq	.+10     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
 80e:	0c 94 fc 04 	jmp	0x9f8	; 0x9f8 <__fp_inf>
 812:	51 11       	cpse	r21, r1
 814:	0c 94 88 05 	jmp	0xb10	; 0xb10 <__fp_szero>
 818:	0c 94 2b 05 	jmp	0xa56	; 0xa56 <__fp_nan>

0000081c <__divsf3x>:
 81c:	0e 94 4d 05 	call	0xa9a	; 0xa9a <__fp_split3>
 820:	68 f3       	brcs	.-38     	; 0x7fc <__divsf3+0x8>

00000822 <__divsf3_pse>:
 822:	99 23       	and	r25, r25
 824:	b1 f3       	breq	.-20     	; 0x812 <__DATA_REGION_LENGTH__+0x12>
 826:	55 23       	and	r21, r21
 828:	91 f3       	breq	.-28     	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 82a:	95 1b       	sub	r25, r21
 82c:	55 0b       	sbc	r21, r21
 82e:	bb 27       	eor	r27, r27
 830:	aa 27       	eor	r26, r26
 832:	62 17       	cp	r22, r18
 834:	73 07       	cpc	r23, r19
 836:	84 07       	cpc	r24, r20
 838:	38 f0       	brcs	.+14     	; 0x848 <__divsf3_pse+0x26>
 83a:	9f 5f       	subi	r25, 0xFF	; 255
 83c:	5f 4f       	sbci	r21, 0xFF	; 255
 83e:	22 0f       	add	r18, r18
 840:	33 1f       	adc	r19, r19
 842:	44 1f       	adc	r20, r20
 844:	aa 1f       	adc	r26, r26
 846:	a9 f3       	breq	.-22     	; 0x832 <__divsf3_pse+0x10>
 848:	35 d0       	rcall	.+106    	; 0x8b4 <__stack+0x55>
 84a:	0e 2e       	mov	r0, r30
 84c:	3a f0       	brmi	.+14     	; 0x85c <__divsf3_pse+0x3a>
 84e:	e0 e8       	ldi	r30, 0x80	; 128
 850:	32 d0       	rcall	.+100    	; 0x8b6 <__stack+0x57>
 852:	91 50       	subi	r25, 0x01	; 1
 854:	50 40       	sbci	r21, 0x00	; 0
 856:	e6 95       	lsr	r30
 858:	00 1c       	adc	r0, r0
 85a:	ca f7       	brpl	.-14     	; 0x84e <__divsf3_pse+0x2c>
 85c:	2b d0       	rcall	.+86     	; 0x8b4 <__stack+0x55>
 85e:	fe 2f       	mov	r31, r30
 860:	29 d0       	rcall	.+82     	; 0x8b4 <__stack+0x55>
 862:	66 0f       	add	r22, r22
 864:	77 1f       	adc	r23, r23
 866:	88 1f       	adc	r24, r24
 868:	bb 1f       	adc	r27, r27
 86a:	26 17       	cp	r18, r22
 86c:	37 07       	cpc	r19, r23
 86e:	48 07       	cpc	r20, r24
 870:	ab 07       	cpc	r26, r27
 872:	b0 e8       	ldi	r27, 0x80	; 128
 874:	09 f0       	breq	.+2      	; 0x878 <__stack+0x19>
 876:	bb 0b       	sbc	r27, r27
 878:	80 2d       	mov	r24, r0
 87a:	bf 01       	movw	r22, r30
 87c:	ff 27       	eor	r31, r31
 87e:	93 58       	subi	r25, 0x83	; 131
 880:	5f 4f       	sbci	r21, 0xFF	; 255
 882:	3a f0       	brmi	.+14     	; 0x892 <__stack+0x33>
 884:	9e 3f       	cpi	r25, 0xFE	; 254
 886:	51 05       	cpc	r21, r1
 888:	78 f0       	brcs	.+30     	; 0x8a8 <__stack+0x49>
 88a:	0c 94 fc 04 	jmp	0x9f8	; 0x9f8 <__fp_inf>
 88e:	0c 94 88 05 	jmp	0xb10	; 0xb10 <__fp_szero>
 892:	5f 3f       	cpi	r21, 0xFF	; 255
 894:	e4 f3       	brlt	.-8      	; 0x88e <__stack+0x2f>
 896:	98 3e       	cpi	r25, 0xE8	; 232
 898:	d4 f3       	brlt	.-12     	; 0x88e <__stack+0x2f>
 89a:	86 95       	lsr	r24
 89c:	77 95       	ror	r23
 89e:	67 95       	ror	r22
 8a0:	b7 95       	ror	r27
 8a2:	f7 95       	ror	r31
 8a4:	9f 5f       	subi	r25, 0xFF	; 255
 8a6:	c9 f7       	brne	.-14     	; 0x89a <__stack+0x3b>
 8a8:	88 0f       	add	r24, r24
 8aa:	91 1d       	adc	r25, r1
 8ac:	96 95       	lsr	r25
 8ae:	87 95       	ror	r24
 8b0:	97 f9       	bld	r25, 7
 8b2:	08 95       	ret
 8b4:	e1 e0       	ldi	r30, 0x01	; 1
 8b6:	66 0f       	add	r22, r22
 8b8:	77 1f       	adc	r23, r23
 8ba:	88 1f       	adc	r24, r24
 8bc:	bb 1f       	adc	r27, r27
 8be:	62 17       	cp	r22, r18
 8c0:	73 07       	cpc	r23, r19
 8c2:	84 07       	cpc	r24, r20
 8c4:	ba 07       	cpc	r27, r26
 8c6:	20 f0       	brcs	.+8      	; 0x8d0 <__stack+0x71>
 8c8:	62 1b       	sub	r22, r18
 8ca:	73 0b       	sbc	r23, r19
 8cc:	84 0b       	sbc	r24, r20
 8ce:	ba 0b       	sbc	r27, r26
 8d0:	ee 1f       	adc	r30, r30
 8d2:	88 f7       	brcc	.-30     	; 0x8b6 <__stack+0x57>
 8d4:	e0 95       	com	r30
 8d6:	08 95       	ret

000008d8 <__fixunssfsi>:
 8d8:	0e 94 55 05 	call	0xaaa	; 0xaaa <__fp_splitA>
 8dc:	88 f0       	brcs	.+34     	; 0x900 <__fixunssfsi+0x28>
 8de:	9f 57       	subi	r25, 0x7F	; 127
 8e0:	98 f0       	brcs	.+38     	; 0x908 <__fixunssfsi+0x30>
 8e2:	b9 2f       	mov	r27, r25
 8e4:	99 27       	eor	r25, r25
 8e6:	b7 51       	subi	r27, 0x17	; 23
 8e8:	b0 f0       	brcs	.+44     	; 0x916 <__fixunssfsi+0x3e>
 8ea:	e1 f0       	breq	.+56     	; 0x924 <__fixunssfsi+0x4c>
 8ec:	66 0f       	add	r22, r22
 8ee:	77 1f       	adc	r23, r23
 8f0:	88 1f       	adc	r24, r24
 8f2:	99 1f       	adc	r25, r25
 8f4:	1a f0       	brmi	.+6      	; 0x8fc <__fixunssfsi+0x24>
 8f6:	ba 95       	dec	r27
 8f8:	c9 f7       	brne	.-14     	; 0x8ec <__fixunssfsi+0x14>
 8fa:	14 c0       	rjmp	.+40     	; 0x924 <__fixunssfsi+0x4c>
 8fc:	b1 30       	cpi	r27, 0x01	; 1
 8fe:	91 f0       	breq	.+36     	; 0x924 <__fixunssfsi+0x4c>
 900:	0e 94 87 05 	call	0xb0e	; 0xb0e <__fp_zero>
 904:	b1 e0       	ldi	r27, 0x01	; 1
 906:	08 95       	ret
 908:	0c 94 87 05 	jmp	0xb0e	; 0xb0e <__fp_zero>
 90c:	67 2f       	mov	r22, r23
 90e:	78 2f       	mov	r23, r24
 910:	88 27       	eor	r24, r24
 912:	b8 5f       	subi	r27, 0xF8	; 248
 914:	39 f0       	breq	.+14     	; 0x924 <__fixunssfsi+0x4c>
 916:	b9 3f       	cpi	r27, 0xF9	; 249
 918:	cc f3       	brlt	.-14     	; 0x90c <__fixunssfsi+0x34>
 91a:	86 95       	lsr	r24
 91c:	77 95       	ror	r23
 91e:	67 95       	ror	r22
 920:	b3 95       	inc	r27
 922:	d9 f7       	brne	.-10     	; 0x91a <__fixunssfsi+0x42>
 924:	3e f4       	brtc	.+14     	; 0x934 <__fixunssfsi+0x5c>
 926:	90 95       	com	r25
 928:	80 95       	com	r24
 92a:	70 95       	com	r23
 92c:	61 95       	neg	r22
 92e:	7f 4f       	sbci	r23, 0xFF	; 255
 930:	8f 4f       	sbci	r24, 0xFF	; 255
 932:	9f 4f       	sbci	r25, 0xFF	; 255
 934:	08 95       	ret

00000936 <__floatunsisf>:
 936:	e8 94       	clt
 938:	09 c0       	rjmp	.+18     	; 0x94c <__floatsisf+0x12>

0000093a <__floatsisf>:
 93a:	97 fb       	bst	r25, 7
 93c:	3e f4       	brtc	.+14     	; 0x94c <__floatsisf+0x12>
 93e:	90 95       	com	r25
 940:	80 95       	com	r24
 942:	70 95       	com	r23
 944:	61 95       	neg	r22
 946:	7f 4f       	sbci	r23, 0xFF	; 255
 948:	8f 4f       	sbci	r24, 0xFF	; 255
 94a:	9f 4f       	sbci	r25, 0xFF	; 255
 94c:	99 23       	and	r25, r25
 94e:	a9 f0       	breq	.+42     	; 0x97a <__floatsisf+0x40>
 950:	f9 2f       	mov	r31, r25
 952:	96 e9       	ldi	r25, 0x96	; 150
 954:	bb 27       	eor	r27, r27
 956:	93 95       	inc	r25
 958:	f6 95       	lsr	r31
 95a:	87 95       	ror	r24
 95c:	77 95       	ror	r23
 95e:	67 95       	ror	r22
 960:	b7 95       	ror	r27
 962:	f1 11       	cpse	r31, r1
 964:	f8 cf       	rjmp	.-16     	; 0x956 <__floatsisf+0x1c>
 966:	fa f4       	brpl	.+62     	; 0x9a6 <__floatsisf+0x6c>
 968:	bb 0f       	add	r27, r27
 96a:	11 f4       	brne	.+4      	; 0x970 <__floatsisf+0x36>
 96c:	60 ff       	sbrs	r22, 0
 96e:	1b c0       	rjmp	.+54     	; 0x9a6 <__floatsisf+0x6c>
 970:	6f 5f       	subi	r22, 0xFF	; 255
 972:	7f 4f       	sbci	r23, 0xFF	; 255
 974:	8f 4f       	sbci	r24, 0xFF	; 255
 976:	9f 4f       	sbci	r25, 0xFF	; 255
 978:	16 c0       	rjmp	.+44     	; 0x9a6 <__floatsisf+0x6c>
 97a:	88 23       	and	r24, r24
 97c:	11 f0       	breq	.+4      	; 0x982 <__floatsisf+0x48>
 97e:	96 e9       	ldi	r25, 0x96	; 150
 980:	11 c0       	rjmp	.+34     	; 0x9a4 <__floatsisf+0x6a>
 982:	77 23       	and	r23, r23
 984:	21 f0       	breq	.+8      	; 0x98e <__floatsisf+0x54>
 986:	9e e8       	ldi	r25, 0x8E	; 142
 988:	87 2f       	mov	r24, r23
 98a:	76 2f       	mov	r23, r22
 98c:	05 c0       	rjmp	.+10     	; 0x998 <__floatsisf+0x5e>
 98e:	66 23       	and	r22, r22
 990:	71 f0       	breq	.+28     	; 0x9ae <__floatsisf+0x74>
 992:	96 e8       	ldi	r25, 0x86	; 134
 994:	86 2f       	mov	r24, r22
 996:	70 e0       	ldi	r23, 0x00	; 0
 998:	60 e0       	ldi	r22, 0x00	; 0
 99a:	2a f0       	brmi	.+10     	; 0x9a6 <__floatsisf+0x6c>
 99c:	9a 95       	dec	r25
 99e:	66 0f       	add	r22, r22
 9a0:	77 1f       	adc	r23, r23
 9a2:	88 1f       	adc	r24, r24
 9a4:	da f7       	brpl	.-10     	; 0x99c <__floatsisf+0x62>
 9a6:	88 0f       	add	r24, r24
 9a8:	96 95       	lsr	r25
 9aa:	87 95       	ror	r24
 9ac:	97 f9       	bld	r25, 7
 9ae:	08 95       	ret

000009b0 <__fp_cmp>:
 9b0:	99 0f       	add	r25, r25
 9b2:	00 08       	sbc	r0, r0
 9b4:	55 0f       	add	r21, r21
 9b6:	aa 0b       	sbc	r26, r26
 9b8:	e0 e8       	ldi	r30, 0x80	; 128
 9ba:	fe ef       	ldi	r31, 0xFE	; 254
 9bc:	16 16       	cp	r1, r22
 9be:	17 06       	cpc	r1, r23
 9c0:	e8 07       	cpc	r30, r24
 9c2:	f9 07       	cpc	r31, r25
 9c4:	c0 f0       	brcs	.+48     	; 0x9f6 <__fp_cmp+0x46>
 9c6:	12 16       	cp	r1, r18
 9c8:	13 06       	cpc	r1, r19
 9ca:	e4 07       	cpc	r30, r20
 9cc:	f5 07       	cpc	r31, r21
 9ce:	98 f0       	brcs	.+38     	; 0x9f6 <__fp_cmp+0x46>
 9d0:	62 1b       	sub	r22, r18
 9d2:	73 0b       	sbc	r23, r19
 9d4:	84 0b       	sbc	r24, r20
 9d6:	95 0b       	sbc	r25, r21
 9d8:	39 f4       	brne	.+14     	; 0x9e8 <__fp_cmp+0x38>
 9da:	0a 26       	eor	r0, r26
 9dc:	61 f0       	breq	.+24     	; 0x9f6 <__fp_cmp+0x46>
 9de:	23 2b       	or	r18, r19
 9e0:	24 2b       	or	r18, r20
 9e2:	25 2b       	or	r18, r21
 9e4:	21 f4       	brne	.+8      	; 0x9ee <__fp_cmp+0x3e>
 9e6:	08 95       	ret
 9e8:	0a 26       	eor	r0, r26
 9ea:	09 f4       	brne	.+2      	; 0x9ee <__fp_cmp+0x3e>
 9ec:	a1 40       	sbci	r26, 0x01	; 1
 9ee:	a6 95       	lsr	r26
 9f0:	8f ef       	ldi	r24, 0xFF	; 255
 9f2:	81 1d       	adc	r24, r1
 9f4:	81 1d       	adc	r24, r1
 9f6:	08 95       	ret

000009f8 <__fp_inf>:
 9f8:	97 f9       	bld	r25, 7
 9fa:	9f 67       	ori	r25, 0x7F	; 127
 9fc:	80 e8       	ldi	r24, 0x80	; 128
 9fe:	70 e0       	ldi	r23, 0x00	; 0
 a00:	60 e0       	ldi	r22, 0x00	; 0
 a02:	08 95       	ret

00000a04 <__fp_mintl>:
 a04:	88 23       	and	r24, r24
 a06:	71 f4       	brne	.+28     	; 0xa24 <__fp_mintl+0x20>
 a08:	77 23       	and	r23, r23
 a0a:	21 f0       	breq	.+8      	; 0xa14 <__fp_mintl+0x10>
 a0c:	98 50       	subi	r25, 0x08	; 8
 a0e:	87 2b       	or	r24, r23
 a10:	76 2f       	mov	r23, r22
 a12:	07 c0       	rjmp	.+14     	; 0xa22 <__fp_mintl+0x1e>
 a14:	66 23       	and	r22, r22
 a16:	11 f4       	brne	.+4      	; 0xa1c <__fp_mintl+0x18>
 a18:	99 27       	eor	r25, r25
 a1a:	0d c0       	rjmp	.+26     	; 0xa36 <__fp_mintl+0x32>
 a1c:	90 51       	subi	r25, 0x10	; 16
 a1e:	86 2b       	or	r24, r22
 a20:	70 e0       	ldi	r23, 0x00	; 0
 a22:	60 e0       	ldi	r22, 0x00	; 0
 a24:	2a f0       	brmi	.+10     	; 0xa30 <__fp_mintl+0x2c>
 a26:	9a 95       	dec	r25
 a28:	66 0f       	add	r22, r22
 a2a:	77 1f       	adc	r23, r23
 a2c:	88 1f       	adc	r24, r24
 a2e:	da f7       	brpl	.-10     	; 0xa26 <__fp_mintl+0x22>
 a30:	88 0f       	add	r24, r24
 a32:	96 95       	lsr	r25
 a34:	87 95       	ror	r24
 a36:	97 f9       	bld	r25, 7
 a38:	08 95       	ret

00000a3a <__fp_mpack>:
 a3a:	9f 3f       	cpi	r25, 0xFF	; 255
 a3c:	31 f0       	breq	.+12     	; 0xa4a <__fp_mpack_finite+0xc>

00000a3e <__fp_mpack_finite>:
 a3e:	91 50       	subi	r25, 0x01	; 1
 a40:	20 f4       	brcc	.+8      	; 0xa4a <__fp_mpack_finite+0xc>
 a42:	87 95       	ror	r24
 a44:	77 95       	ror	r23
 a46:	67 95       	ror	r22
 a48:	b7 95       	ror	r27
 a4a:	88 0f       	add	r24, r24
 a4c:	91 1d       	adc	r25, r1
 a4e:	96 95       	lsr	r25
 a50:	87 95       	ror	r24
 a52:	97 f9       	bld	r25, 7
 a54:	08 95       	ret

00000a56 <__fp_nan>:
 a56:	9f ef       	ldi	r25, 0xFF	; 255
 a58:	80 ec       	ldi	r24, 0xC0	; 192
 a5a:	08 95       	ret

00000a5c <__fp_pscA>:
 a5c:	00 24       	eor	r0, r0
 a5e:	0a 94       	dec	r0
 a60:	16 16       	cp	r1, r22
 a62:	17 06       	cpc	r1, r23
 a64:	18 06       	cpc	r1, r24
 a66:	09 06       	cpc	r0, r25
 a68:	08 95       	ret

00000a6a <__fp_pscB>:
 a6a:	00 24       	eor	r0, r0
 a6c:	0a 94       	dec	r0
 a6e:	12 16       	cp	r1, r18
 a70:	13 06       	cpc	r1, r19
 a72:	14 06       	cpc	r1, r20
 a74:	05 06       	cpc	r0, r21
 a76:	08 95       	ret

00000a78 <__fp_round>:
 a78:	09 2e       	mov	r0, r25
 a7a:	03 94       	inc	r0
 a7c:	00 0c       	add	r0, r0
 a7e:	11 f4       	brne	.+4      	; 0xa84 <__fp_round+0xc>
 a80:	88 23       	and	r24, r24
 a82:	52 f0       	brmi	.+20     	; 0xa98 <__fp_round+0x20>
 a84:	bb 0f       	add	r27, r27
 a86:	40 f4       	brcc	.+16     	; 0xa98 <__fp_round+0x20>
 a88:	bf 2b       	or	r27, r31
 a8a:	11 f4       	brne	.+4      	; 0xa90 <__fp_round+0x18>
 a8c:	60 ff       	sbrs	r22, 0
 a8e:	04 c0       	rjmp	.+8      	; 0xa98 <__fp_round+0x20>
 a90:	6f 5f       	subi	r22, 0xFF	; 255
 a92:	7f 4f       	sbci	r23, 0xFF	; 255
 a94:	8f 4f       	sbci	r24, 0xFF	; 255
 a96:	9f 4f       	sbci	r25, 0xFF	; 255
 a98:	08 95       	ret

00000a9a <__fp_split3>:
 a9a:	57 fd       	sbrc	r21, 7
 a9c:	90 58       	subi	r25, 0x80	; 128
 a9e:	44 0f       	add	r20, r20
 aa0:	55 1f       	adc	r21, r21
 aa2:	59 f0       	breq	.+22     	; 0xaba <__fp_splitA+0x10>
 aa4:	5f 3f       	cpi	r21, 0xFF	; 255
 aa6:	71 f0       	breq	.+28     	; 0xac4 <__fp_splitA+0x1a>
 aa8:	47 95       	ror	r20

00000aaa <__fp_splitA>:
 aaa:	88 0f       	add	r24, r24
 aac:	97 fb       	bst	r25, 7
 aae:	99 1f       	adc	r25, r25
 ab0:	61 f0       	breq	.+24     	; 0xaca <__fp_splitA+0x20>
 ab2:	9f 3f       	cpi	r25, 0xFF	; 255
 ab4:	79 f0       	breq	.+30     	; 0xad4 <__fp_splitA+0x2a>
 ab6:	87 95       	ror	r24
 ab8:	08 95       	ret
 aba:	12 16       	cp	r1, r18
 abc:	13 06       	cpc	r1, r19
 abe:	14 06       	cpc	r1, r20
 ac0:	55 1f       	adc	r21, r21
 ac2:	f2 cf       	rjmp	.-28     	; 0xaa8 <__fp_split3+0xe>
 ac4:	46 95       	lsr	r20
 ac6:	f1 df       	rcall	.-30     	; 0xaaa <__fp_splitA>
 ac8:	08 c0       	rjmp	.+16     	; 0xada <__fp_splitA+0x30>
 aca:	16 16       	cp	r1, r22
 acc:	17 06       	cpc	r1, r23
 ace:	18 06       	cpc	r1, r24
 ad0:	99 1f       	adc	r25, r25
 ad2:	f1 cf       	rjmp	.-30     	; 0xab6 <__fp_splitA+0xc>
 ad4:	86 95       	lsr	r24
 ad6:	71 05       	cpc	r23, r1
 ad8:	61 05       	cpc	r22, r1
 ada:	08 94       	sec
 adc:	08 95       	ret

00000ade <__fp_trunc>:
 ade:	0e 94 55 05 	call	0xaaa	; 0xaaa <__fp_splitA>
 ae2:	a0 f0       	brcs	.+40     	; 0xb0c <__fp_trunc+0x2e>
 ae4:	be e7       	ldi	r27, 0x7E	; 126
 ae6:	b9 17       	cp	r27, r25
 ae8:	88 f4       	brcc	.+34     	; 0xb0c <__fp_trunc+0x2e>
 aea:	bb 27       	eor	r27, r27
 aec:	9f 38       	cpi	r25, 0x8F	; 143
 aee:	60 f4       	brcc	.+24     	; 0xb08 <__fp_trunc+0x2a>
 af0:	16 16       	cp	r1, r22
 af2:	b1 1d       	adc	r27, r1
 af4:	67 2f       	mov	r22, r23
 af6:	78 2f       	mov	r23, r24
 af8:	88 27       	eor	r24, r24
 afa:	98 5f       	subi	r25, 0xF8	; 248
 afc:	f7 cf       	rjmp	.-18     	; 0xaec <__fp_trunc+0xe>
 afe:	86 95       	lsr	r24
 b00:	77 95       	ror	r23
 b02:	67 95       	ror	r22
 b04:	b1 1d       	adc	r27, r1
 b06:	93 95       	inc	r25
 b08:	96 39       	cpi	r25, 0x96	; 150
 b0a:	c8 f3       	brcs	.-14     	; 0xafe <__fp_trunc+0x20>
 b0c:	08 95       	ret

00000b0e <__fp_zero>:
 b0e:	e8 94       	clt

00000b10 <__fp_szero>:
 b10:	bb 27       	eor	r27, r27
 b12:	66 27       	eor	r22, r22
 b14:	77 27       	eor	r23, r23
 b16:	cb 01       	movw	r24, r22
 b18:	97 f9       	bld	r25, 7
 b1a:	08 95       	ret

00000b1c <_exit>:
 b1c:	f8 94       	cli

00000b1e <__stop_program>:
 b1e:	ff cf       	rjmp	.-2      	; 0xb1e <__stop_program>
